---
import type { CollectionEntry } from 'astro:content'
import BaseHead from '../components/BaseHead.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import FormattedDate from '../components/FormattedDate.astro'
import Container from '@/components/Container.astro'
import '@/styles/_blog.scss'
import { Image } from 'astro:assets'
import Breadcrumbs from '@/components/Breadcrumbs.astro'

type Props = CollectionEntry<'blog'>['data']

const { slug } = Astro.params
const { title, description, pubDate, updatedDate, heroImage } = Astro.props
---

<html lang="ja">
  <head>
    <BaseHead title={title} description={description} />
  </head>

  <body>
    <Header />
    <main class="container">
        <Breadcrumbs/>
        <article>
          <div class="hero-image">
            {
              heroImage && (
                <Image
                  width={1020}
                  height={510}
                  src={heroImage}
                  format="webp"
                  alt=""
                  loading="eager"
                  fetchpriority="high"
                  class="image"
                  transition:name={`blog-placeholder-${slug}`}
                />
              )
            }
          </div>
          <div class="prose">
            <div class="title">
              <h1>{title}</h1>
              <div class="date">
                <FormattedDate date={pubDate} />
                {
                  updatedDate && (
                    <div class="last-updated-on">
                      Last updated on <FormattedDate date={updatedDate} />
                    </div>
                  )
                }
              </div>
            </div>
            <slot />
          </div>

          <a href="vscode://file/blog/markdown-style-guide/"></a>
        </article>
    </main>
    <Footer />
  </body>
  
  <script>
    const headings = document.querySelectorAll('h2')
    const tocContainer = document.getElementById('toc')
    const tocList = document.createElement('ul')
    tocContainer?.appendChild(tocList)

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.id
          const tocLink = document.querySelector(`a[href="#${id}"]`)
          if (entry.isIntersecting) {
            tocLink?.classList.add('highlight')
          } else {
            tocLink?.classList.remove('highlight')
          }
        })
      },
      { rootMargin: '-20% 0px -80% 0px' },
    )

    headings.forEach((heading) => {
      const tocItem = document.createElement('li')
      const tocLink = document.createElement('a')
      tocLink.href = `#${heading.id}`
      tocLink.textContent = heading.textContent
      tocItem.appendChild(tocLink)
      tocList.appendChild(tocItem)
      observer.observe(heading)
    })
  </script>
</html>
